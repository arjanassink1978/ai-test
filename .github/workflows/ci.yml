name: CI

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  build-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Build and test backend
        run: |
          cd backend
          mvn clean verify
      - name: Build backend Docker image
        run: docker build -t backend:test ./backend
      - name: Upload backend Allure results
        uses: actions/upload-artifact@v4
        with:
          name: backend-allure-results
          path: backend/target/allure-results

  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
      - name: Build frontend
        working-directory: frontend
        run: npm run build
      - name: Build frontend Docker image
        run: docker build -t frontend:test ./frontend

  # This job runs Playwright E2E tests against services started with Docker Compose
  e2e-playwright:
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and start frontend and backend with Docker Compose
        run: docker compose up -d --build

      - name: Wait for backend (Spring Boot) to be ready
        run: |
          for i in {1..30}; do
            nc -z localhost 8082 && echo "Backend is up!" && exit 0
            echo "Waiting for backend..."
            sleep 2
          done
          echo "Backend did not start in time" && exit 1

      - name: Wait for frontend (Next.js) to be ready
        run: |
          for i in {1..30}; do
            nc -z localhost 3000 && echo "Frontend is up!" && exit 0
            echo "Waiting for frontend..."
            sleep 2
          done
          echo "Frontend did not start in time" && exit 1

      - name: Install Playwright browser dependencies
        working-directory: frontend
        run: npx playwright install-deps

      - name: Run Playwright E2E tests (Java)
        working-directory: frontend
        run: mvn test

      - name: Upload Allure results from E2E tests
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-e2e
          path: frontend/target/allure-results

      - name: Tear down Docker Compose services
        if: always()
        run: docker compose down

  allure-report:
    runs-on: ubuntu-latest
    needs: [build-backend, e2e-playwright]
    steps:
      - uses: actions/checkout@v4
      - name: Download backend Allure results
        uses: actions/download-artifact@v4
        with:
          name: backend-allure-results
          path: backend/target/allure-results
      - name: Download E2E Allure results
        uses: actions/download-artifact@v4
        with:
          name: allure-results-e2e
          path: frontend/target/allure-results
      - name: Merge Allure results
        run: |
          mkdir -p merged-allure-results
          cp -r backend/target/allure-results/* merged-allure-results/ || true
          cp -r frontend/target/allure-results/* merged-allure-results/ || true

      - name: Install Allure Commandline
        run: |
          wget https://github.com/allure-framework/allure2/releases/download/2.27.0/allure-2.27.0.tgz
          tar -xzf allure-2.27.0.tgz
          sudo mv allure-2.27.0 /opt/allure
          sudo ln -s /opt/allure/bin/allure /usr/local/bin/allure

      - name: Generate Allure HTML report
        run: |
          allure generate merged-allure-results --clean -o allure-history

      - name: Ensure Allure history directory exists and is writable
        run: |
          sudo chown -R $USER:$USER allure-history || true
          mkdir -p allure-history
          touch allure-history/.keep

      - name: Publish Allure report to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: allure-history

# Trigger workflow: trivial change